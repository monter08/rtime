use sqlite::Connection;use crate::repository::TaskRepository;use cli_table::{Cell, Style, Table};use crate::cli::command::minutes_display;use crate::cli::Error;pub fn list(db: &Connection, project: Option<i64>) -> Result<(), Error> {    let mut sum_h = 0;    let tasks = match project {        None => TaskRepository::list(&db).expect("Error"),        Some(id) => TaskRepository::find(&db, id).expect("Error")    };    let mut vec = tasks.into_iter().map(|task| {        sum_h += task.time.clone();        vec![            task.id.clone().map(|id| id.to_string()).expect("0"),            task.name.clone(),            task.project.name.clone(),            task.created_at.map(|date| date.format("%Y-%m-%d %H:%M:%S").to_string()).unwrap_or("-".to_string()),            format!("{}", minutes_display(task.time.clone()))        ]    }    ).collect::<Vec<_>>();    vec.push(vec![        "".to_string(),        "".to_string(),        "".to_string(),        "Summary".to_string(),        minutes_display(sum_h)    ]);    let table = vec.table()        .title(vec![            "ID".cell().bold(true),            "Name".cell().bold(true),            "Project".cell().bold(true),            "Created at".cell().bold(true),            "Time Wasted".cell().bold(true),        ])        .bold(true);    let table_display = table.display().unwrap();    println!("{}", table_display);    Ok(())}